diff --git a/test_issue.py b/test_issue.py
new file mode 100644
index 0000000000..9c4469eb65
--- /dev/null
+++ b/test_issue.py
@@ -0,0 +1,158 @@
+"""
+Test script to reproduce the issue with AlterOrderWithRespectTo and AddIndex operations order.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations import operations
+from django.db.migrations.operations.models import CreateModel, AddIndex, AlterOrderWithRespectTo
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    USE_TZ=True,
+)
+
+django.setup()
+
+# Create test states
+from_state = ProjectState()
+
+# Add the Look model to from_state
+from_state.add_model(ModelState(
+    'posts', 'Look',
+    [
+        ('id', models.AutoField(primary_key=True)),
+        ('name', models.CharField(max_length=100)),
+    ],
+    {
+        'indexes': [],
+        'constraints': [],
+    },
+))
+
+# Create to_state with LookImage model that has order_with_respect_to and index on _order
+to_state = ProjectState()
+
+# Add the Look model to to_state
+to_state.add_model(ModelState(
+    'posts', 'Look',
+    [
+        ('id', models.AutoField(primary_key=True)),
+        ('name', models.CharField(max_length=100)),
+    ],
+    {
+        'indexes': [],
+        'constraints': [],
+    },
+))
+
+# Add the LookImage model with order_with_respect_to and indexes
+to_state.add_model(ModelState(
+    'posts', 'LookImage',
+    [
+        ('id', models.AutoField(primary_key=True)),
+        ('look', models.ForeignKey('posts.Look', on_delete=models.CASCADE)),
+        ('image_url', models.URLField(blank=True, null=True, max_length=10000)),
+        ('created_at', models.DateTimeField(auto_now_add=True)),
+        ('updated_at', models.DateTimeField(auto_now=True)),
+    ],
+    {
+        'order_with_respect_to': 'look',
+        'indexes': [
+            models.Index(fields=['look', '_order'], name='look_image_look_id_order_idx'),
+            models.Index(fields=['created_at'], name='look_image_created_idx'),
+            models.Index(fields=['updated_at'], name='look_image_updated_idx'),
+        ],
+        'constraints': [],
+    },
+))
+
+# Create autodetector and detect changes
+from django.db.migrations.graph import MigrationGraph
+autodetector = MigrationAutodetector(from_state, to_state)
+
+# Debug: Check what models are detected
+print("From state models:", list(from_state.models.keys()))
+print("To state models:", list(to_state.models.keys()))
+
+graph = MigrationGraph()
+
+# Get the formatted changes (this calls _detect_changes internally)
+changes = autodetector.changes(graph)
+
+# Print the generated operations
+print("Generated operations from changes:")
+for app_label, migrations in changes.items():
+    print(f"\nApp: {app_label}")
+    for migration in migrations:
+        print(f"  Migration: {migration.name}")
+        for i, op in enumerate(migration.operations):
+            print(f"    {i+1}. {op.__class__.__name__}", end="")
+            if hasattr(op, 'name'):
+                print(f" - {op.name}", end="")
+            if hasattr(op, 'model_name'):
+                print(f" - {op.model_name}", end="")
+            if hasattr(op, 'index') and op.index:
+                print(f" - fields: {op.index.fields}", end="")
+            if hasattr(op, 'order_with_respect_to'):
+                print(f" - order_with_respect_to: {op.order_with_respect_to}", end="")
+            print()
+
+print("\nGenerated operations from autodetector.generated_operations:")
+for app_label, operations in autodetector.generated_operations.items():
+    print(f"\nApp: {app_label}")
+    for i, op in enumerate(operations):
+        print(f"  {i+1}. {op.__class__.__name__}", end="")
+        if hasattr(op, 'name'):
+            print(f" - {op.name}", end="")
+        if hasattr(op, 'model_name'):
+            print(f" - {op.model_name}", end="")
+        if hasattr(op, 'index') and op.index:
+            print(f" - fields: {op.index.fields}", end="")
+        if hasattr(op, 'order_with_respect_to'):
+            print(f" - order_with_respect_to: {op.order_with_respect_to}", end="")
+        print()
+
+# Check if AddIndex with _order comes before AlterOrderWithRespectTo
+print("\n" + "="*50)
+print("Checking operation order in changes...")
+print("="*50)
+
+if 'posts' in changes:
+    for migration in changes['posts']:
+        add_index_order_pos = None
+        alter_order_pos = None
+        
+        for i, op in enumerate(migration.operations):
+            if isinstance(op, AddIndex) and '_order' in op.index.fields:
+                add_index_order_pos = i
+                print(f"Found AddIndex with _order at position {i+1}")
+            elif isinstance(op, AlterOrderWithRespectTo):
+                alter_order_pos = i
+                print(f"Found AlterOrderWithRespectTo at position {i+1}")
+        
+        if add_index_order_pos is not None and alter_order_pos is not None:
+            if add_index_order_pos < alter_order_pos:
+                print("\n❌ ERROR: AddIndex with _order comes BEFORE AlterOrderWithRespectTo!")
+                print("This will cause a migration error because _order field doesn't exist yet.")
+            else:
+                print("\n✓ OK: AlterOrderWithRespectTo comes before AddIndex with _order")
+        elif add_index_order_pos is None:
+            print("\nNo AddIndex operation with _order field found")
+        elif alter_order_pos is None:
+            print("\nNo AlterOrderWithRespectTo operation found")
\ No newline at end of file
diff --git a/test_issue2.py b/test_issue2.py
new file mode 100644
index 0000000000..bf1a8f817b
--- /dev/null
+++ b/test_issue2.py
@@ -0,0 +1,130 @@
+"""
+Test script to reproduce the issue with AlterOrderWithRespectTo and AddIndex operations order.
+"""
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'test_app',
+    ],
+    USE_TZ=True,
+)
+
+django.setup()
+
+# Create a test app
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
+    label = 'test_app'
+
+# Create models
+from django.db import models
+
+class Look(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_app'
+
+class LookImage(models.Model):
+    look = models.ForeignKey(Look, on_delete=models.CASCADE, related_name='images')
+    image_url = models.URLField(blank=True, null=True, max_length=10000)
+    created_at = models.DateTimeField(auto_now_add=True)
+    updated_at = models.DateTimeField(auto_now=True)
+    
+    class Meta:
+        app_label = 'test_app'
+        order_with_respect_to = 'look'
+        indexes = [
+            models.Index(fields=['look', '_order'], name='look_image_look_id_order_idx'),
+            models.Index(fields=['created_at'], name='look_image_created_idx'),
+            models.Index(fields=['updated_at'], name='look_image_updated_idx'),
+        ]
+
+# Now test the autodetector
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.state import ProjectState
+from django.db.migrations.graph import MigrationGraph
+from django.db.migrations.operations.models import CreateModel, AddIndex, AlterOrderWithRespectTo
+
+# Create from_state with just Look model
+from_state = ProjectState()
+from_state.add_model_state(Look._meta.app_label, Look._meta.object_name.lower(), 
+                          from_state.models.get((Look._meta.app_label, Look._meta.object_name.lower()), 
+                                                from_state.from_apps(None).get_model(Look._meta.app_label, Look._meta.object_name)))
+
+# Create to_state with both models
+to_state = ProjectState()
+to_state.add_model_state(Look._meta.app_label, Look._meta.object_name.lower(),
+                        to_state.models.get((Look._meta.app_label, Look._meta.object_name.lower()),
+                                            to_state.from_apps(None).get_model(Look._meta.app_label, Look._meta.object_name)))
+to_state.add_model_state(LookImage._meta.app_label, LookImage._meta.object_name.lower(),
+                        to_state.models.get((LookImage._meta.app_label, LookImage._meta.object_name.lower()),
+                                            to_state.from_apps(None).get_model(LookImage._meta.app_label, LookImage._meta.object_name)))
+
+# Create autodetector and detect changes
+autodetector = MigrationAutodetector(from_state, to_state)
+graph = MigrationGraph()
+changes = autodetector.changes(graph)
+
+# Print the generated operations
+print("Generated operations from changes:")
+for app_label, migrations in changes.items():
+    print(f"\nApp: {app_label}")
+    for migration in migrations:
+        print(f"  Migration: {migration.name}")
+        for i, op in enumerate(migration.operations):
+            print(f"    {i+1}. {op.__class__.__name__}", end="")
+            if hasattr(op, 'name'):
+                print(f" - {op.name}", end="")
+            if hasattr(op, 'model_name'):
+                print(f" - {op.model_name}", end="")
+            if hasattr(op, 'index') and op.index:
+                print(f" - fields: {op.index.fields}", end="")
+            if hasattr(op, 'order_with_respect_to'):
+                print(f" - order_with_respect_to: {op.order_with_respect_to}", end="")
+            print()
+
+# Check if AddIndex with _order comes before AlterOrderWithRespectTo
+print("\n" + "="*50)
+print("Checking operation order in changes...")
+print("="*50)
+
+if 'test_app' in changes:
+    for migration in changes['test_app']:
+        add_index_order_pos = None
+        alter_order_pos = None
+        
+        for i, op in enumerate(migration.operations):
+            if isinstance(op, AddIndex) and '_order' in op.index.fields:
+                add_index_order_pos = i
+                print(f"Found AddIndex with _order at position {i+1}")
+            elif isinstance(op, AlterOrderWithRespectTo):
+                alter_order_pos = i
+                print(f"Found AlterOrderWithRespectTo at position {i+1}")
+        
+        if add_index_order_pos is not None and alter_order_pos is not None:
+            if add_index_order_pos < alter_order_pos:
+                print("\n❌ ERROR: AddIndex with _order comes BEFORE AlterOrderWithRespectTo!")
+                print("This will cause a migration error because _order field doesn't exist yet.")
+            else:
+                print("\n✓ OK: AlterOrderWithRespectTo comes before AddIndex with _order")
+        elif add_index_order_pos is None:
+            print("\nNo AddIndex operation with _order field found")
+        elif alter_order_pos is None:
+            print("\nNo AlterOrderWithRespectTo operation found")
\ No newline at end of file
diff --git a/testproject/manage.py b/testproject/manage.py
new file mode 100755
index 0000000000..6253a24931
--- /dev/null
+++ b/testproject/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/testproject/testproject/__init__.py b/testproject/testproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testproject/asgi.py b/testproject/testproject/asgi.py
new file mode 100644
index 0000000000..90debc9315
--- /dev/null
+++ b/testproject/testproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for testproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+application = get_asgi_application()
diff --git a/testproject/testproject/settings.py b/testproject/testproject/settings.py
new file mode 100644
index 0000000000..469afc395b
--- /dev/null
+++ b/testproject/testproject/settings.py
@@ -0,0 +1,120 @@
+"""
+Django settings for testproject project.
+
+Generated by 'django-admin startproject' using Django 3.2.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = '^$&786l8yoz8$xqkx$4t#vz&3f=*-&)+4y4ppcmd8zok)ds4c&'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'testproject.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'testproject.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/testproject/testproject/urls.py b/testproject/testproject/urls.py
new file mode 100644
index 0000000000..30a3850b5c
--- /dev/null
+++ b/testproject/testproject/urls.py
@@ -0,0 +1,21 @@
+"""testproject URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/testproject/testproject/wsgi.py b/testproject/testproject/wsgi.py
new file mode 100644
index 0000000000..435e21ceb7
--- /dev/null
+++ b/testproject/testproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for testproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'testproject.settings')
+
+application = get_wsgi_application()
